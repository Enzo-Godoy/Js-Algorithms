
Objects (including arrays and functions) assigned to a variable using const are still mutable. Using the const declaration only prevents reassignment of the variable identifier.

//const declaration alone doesn't really protect our data from mutation. 
 -- To ensure our data doesn't change, Js provides a function 
     'Object.freeze()'

    //Once the object is frozen, we can no longer add, update, or delete properties from it. Any attempt at changing the object will be rejected without an error. 

   In js,  we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. 
     //We don't need to name these functions beacuse we do not reuse them anywhere else. 

 Example: 
 const myFunc = function () { 
 	const myVar = "value";
 	return myVar;
 }


 ---------------------------------------------

 ES6 provides us with the syntactic sugar to not have to write anonymous functions this way.  Instead, we can use arrow function syntax. 

 const myFunc = () => {
 	const myVar = "value"; 
 	return myVar;
 }

 ---------------------------------------------

 When there is no function body, and only a return value, arrow function syntax allows us to omit the keyword return as well as the brackets surrrounding the code.  
  //This way we simplify te code functions into one-line statements

  const myFunc = () => "value"; 

  //This code will still return value by default.

Just like a normal function, we can pass arguments into arrow functions. 

//doubles input value and returns it 
const doubler = (item) => item * 2;



Arrow functions work really well with higher order functions, such as map(), filter (), and reduce(), that take other functions as arguments for processing collections of data. 

FBPosts.filter(function(post)  {
	return post.thumbnail !== null && post.shares > 100 & post.likes > 500;
	})


	With arrow function syntax instead : 
	FBPost.filter((post) => post.thumbnail !== null && post.shares 
	> 100 && post.likes > 500 )

	//Same task with fewer lines of code.

El método map() crea un nuevo array con los resultados de la llamada a la función indicada a cada uno de sus elementos.

var numbers = [1,5 ,10, 15]; 
var doubles = numbers.map(function(x) { 
	return x * 2 ; 
}); 
// doubles is now [2, 10, 20, 30]
//number is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.mao(Math.sqrt);
//root is now [1, 2, 3]
//numbers is still [1, 4, 9]


