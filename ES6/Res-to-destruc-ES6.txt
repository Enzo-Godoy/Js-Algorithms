


 -- Sintaxis from developer.mozilla.org 
 var nuevo_array = arr.map(function call back(currentValue, index, array) {
 	//Elemento devuelto de nuevo_array
 }[, thisArg]) 

 callback 
 	Función que producirá un elemento del nuevo array, recibe tres argumentos : 
 	(currentValue, Index, array). 

 	Math.pow()
 // Está funcion devuelve la base elevada al exponenente, esto es, base Sup(exponente)
 -- Math.pow(base, exponente) 
   base : el número base. 
   exponente: El exponente utilizado para elevar la base.

In order to help us create more flexible functions, ES& introduces default parameters for functions. 

Example : 
function greeting (name = "Anonymous") {
	return "Hello " + name;
}
console.log(greeting("John"));  //Hello John 
console.log(greetin());        //Hello Anonymous.

//The default parameter kicks in when the argument is not specified (it's undefined).
   -- We can add default values for as many parameters as we want. 


The Rest Operator with function Parameters. 
In order to help us create more flexible functions, ES6 introduces the rest operator for function parameters. 
 With the rest operator, we can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.

 Example


function howMany (...args) { 
	return "We have passed " + args.length + "arguments." ; 
}
console.log(howMany(0, 1, 2));  //We have passed 3 arguments
console.log(howMany("string", null, [1, 2, 3], {})); //We have passed 3 arguments

//The rest operator eliminates the need to check the args array and allows us to apply map(), filter() and reduce() on the parameters array.

//La sintaxis de los parámetros rest nos permiten representar un número indefinido de argumentos como un arreglo.

function (a, b, ...theArgs) { 
	 //---
} 

El último parámetro de una función se puede prefijar con ... lo que hará que todos los argumentos restantes (suministrados por el usuario) se coloquen dentro de un arreglo de js "estándar". Sólo el último parámmtero puede ser un "parámetro rest.

function myFun (a, b, ...manyMoreArgs ) { 
	console.log("a", a);
	console.log("b", b); 
	console.log("manyMoreArgs", manoMoreArgs);
} 

myFun("String","bite","Gersen")

-- a , String || b, bite, || ¿Gersen?


Spread operator to evaluate Arrays In-Place. 
ES6 introduces the spread operator, wich allow us to expando arrays and other expressions in places where multiple parameters or elements are expected. 

//The ES5 code below uses apply() to compute the maximum value in an array.

Example : 

var arr = [6, 89, 3, 45];
var maximus = Math.max.apply(null, arr); // returns 89

//We need to use Math.max.apply(null, arr) because Math.max(arr) return NaN 
	-- Math.max()expects comma-separated arguments, but not an array. 

	The spread operator makes this syntax much better to read and maintain. 

const arr = [6, 89, 3, 45]; 
const maximus = Math.max(...arr);  //returns 89

The spread operator only works in-place, like an argument to a function or in an array literal. 

const spreaded = ...arr; //will throw a syntax error. 


Destructuring Assignment to Assign variables from objects.

	---Spread operator can effectively spread, or unpack, the contents of the array. 

//Destructuring assignment is special syntax for neatly assigning values taken directly from an object to variables. 


Consider this code : 

var shark = { x : 3.3 y : 4.4 , z : 6.66}; 

//We can get the value of this way. 
var x = shark.x // x = 3.3
var x = shark.y // y = 4.4
var x = shark.z // z = 6.66

//Or with ES6 destructuring syntax : 

const { x, y ,z } = shark; // x = 3.3, y = 7.4, z = 6.66

-------------------------------------------------------------------

Destructuring assignment to assign variables from arrays. 

ES6 makes destructuring arrays as easy as destructuring objects. 
One key difference betwen the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, we cannot pick or choose wich elements we want to assign to variables. 

We can also acces the value at any index in an array with destructuring by using commas to reach the desired index. 

const [a, b ,,, c] = [1,2,3,4,5,6]; 
console.log (a, b, c);  //1, 2, 5

In some situatuions involving array destructuring, we might want to collect the rest of the elements into a separate array. 


Example : 
const [a, b, ...arr] = [1, 2, 3, 4 ,5 , 7]; 
console.log (a,b) ; // 1, 2
console.log (arr);  // [ 3, 4, 5, 7]

Variables a and b take the first and second values from the array. After that, because of rest operator's presence, arr gets of the values in the form of an array. 

// the rest element only works correctly as the last variable in the list. As in, we cannot use the rest operator to catch a subarray that leaves out last element of the original array.

Use destructuring assignment to pass an object as a function's parameters. 

//We candestrutur the object in a function argument itself. 


Example 

const profileUpdate = (profileData) => { 
	const {name, age, nationality, location} = profileDaya; 
	//We do something here with these var
} 

Example 2 
const profileUpdate = ( { name, age, nationality, location}) => {
	/*do mething with these fields */
}

-- This removes some extra lines and makes our code look neat. 
also added the benefit of not having to manipulate an entire object in a function : only the fields that are needed are copied inside the function-











































