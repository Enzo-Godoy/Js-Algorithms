Introduction to oop. 
Object Oriented Programming : 
Object oriented programming organizes code into objects definitions, these are derived from classes. (Theory) 

And this classes represents objects group together with related behaviour.

#JS 
The data in an object it's an attribute, 
and the behaviour are functions .

Objects can transfer information by calling and passing data to another object's method. 

Objects are represented by things that we see everyday. Tangible things that we can oberve and interact with. 
The properties defined are what makes up an object. 

Objects in JS are use to model real-world object, giving them properties and behaviour just like their real-world 
counterparts. 

 E.G : 
 let duck = { 
 	name : "Aflack", 
 	numberLegs : 2;
 }; 

 -- Accessing properties 
 We can acces the properties of an object by using 'dot notation' this means, 
 the name of the object followed by the property where the value need it's hold. 

 E.G 
 let nameDuck = duck.name; 

 Objects can obtain behaviour representation by adding in their properties functions 
 E.G  : 
 let duck = {
 	name : "Aflack",
 	numberLegs : 2, 
 	sayName : function() { return "The name of the duck" + duck.name }
 }; 

 duck.sayName();

/* 
To avoid the constraint of reference properties within an object  that can be changed afterward, the 'this' keyword 
can be use in order to extract values from the same context.
*/
E.G  : 
.. 
	sayName : function {  return "The name of the duck is" + this.duck}
.. 


/*
 Constructos are functions that create the basic scheme for an object specifed . They define specific behaviour 
that will belong to each object created 
*/
E.G : 
function Bird(){
	this.name = "Albert"; 
	this.color = "Blue"; 
	this.numberLegs = 2; 
}
 
/*
 ## Constructors follows a conventions where they use a capitalized name to be distinguished from other functions. 
 # Also they are used to set properties and behaviour instead of make some task or return a value as a function does.
	In order to manipulate values to be added to each object created from  a constructor the 'this' keyword 
	it's used.
*/

E.G : 
function Bird() {
	this.name  = "SomeName"; 
	this.color = "Blue"; 
	this.numberLegs = 2; 
}

-- Each object created from the before constructor will acquire the same properties 
let blueBird = new Bird(); 


/* Sample with constructor that takes parameters */ 
function Bird(name, color) { 
	this.name = name ; 
	this.color = color; 
	this.numberLegs = 2; 
}

let myBirdPet = new Bird("Bruce", "Red and Yello"); 

/* 
 To detect where an objects it's related to 'x' constructor we can use the function instanceOf provide by
 the api of JS I think so. 
*/ 

E.G : 
let Bird = function(){ 
	this.name = name; 
	this.color = color; 
	this.numberLegs = 2; 
}

let crow = new Bird("Alexis", "White"); 
crow instanceof Bird;  /* It will return true */ 
 

 
/* 
 use prototype properties to reduce duplicate code. 
 Until now we know two kinds of properties : 
 	(a) - * Own Properties. 
    (b) - * Prototypes properties. 
a: Define directly on the object instance itself. 
b: Are defined on the prototype.

The advantage of the constructor property is that it's possible to check for this property to find out what kind 
of object it is.
*/
  
-- Sample of a behaviour added to the prototype 
Bird.prototype.eat = function(){ 
	console.log("Quiet sound made during eating");
}

-- Sample of bahaviour added to an object within a prototype aggregated value 
Bird.prototype = { 
	numberLegs = 2, 
	eat : function(){
		console.log("Silece while eating");
	}, 
	describe : function(){
		console.log("My name is" + this.name);
	}
}; 
 

 /* 
 Code in the prototype can be deleted the code from the constructor property, be carefull!
 We could avoid this by re-defining the constructor property for the same  object.
 */
 E.G : 
 Bird.Prototype = {
 	constructor: Bird, 
 	numberLegs : 2, 
 	eat : function(){ 
 		console.log("Silenc while eating"); 
 	},
 	describe: function(){ 
 		console.log("My name is" + this.name);
 	}
};

/* 
We can know the prototype inheritance by using 'isPrototypeOf' function. 

Bird.prototype.isPrototypeOf(duck);
All object in Js (With a few exceptions) has a prototype. An object's prototype itself 
is an object. 

function Bird(name){ 
	this.name = name;
}

typeOf Bird.protype;  /* =>>> Object */ 

 /* 
 A Great example of prototype chain it's the 'hasOwnProperty' function. 
 it's defined in Object.prototype, wich can be acessed by Bird.prototype and a its time by 'duck'

  Duck (subType) > Bird (superType).

  Object is a supertype for all objects in Javascript. And for this any object can use the 'hasOwnProperty' function. 

  Concept >> D.R.Y (Don't Repeat Yourself)

*/ 

-- Sample of two Constructor being Cleaned to avoid repetition of behaviour 
Bird.prototype = { 
	constructor : Bird, 
	describe : function(){ 
		console.log("My name is " + this.name);
	}
}; 

Dog.prototype = { 
	constructor : Dog, 
	describe : function(){ 
		console.log("My name is" + this.name);
	}
}; 

 /* Both of the them implements the same described function, solved by using the DRY concept 
 Adding the same behaviour to the superType (parent) of boths 'Animals'*/
 function Animal(){ 
 	constructor: Animal, 
 	describe: function(){ 
 		console.log("My name is:" + this.name);
 	}
 };

 Bird.prototype = { 
 	constructor = 'Bird';
 };
 Dog.prototype = { 
 	constructor = 'Bird';
 };


-- Also we can create a new object whom inherit from its superparent by using Object.create(arg)
Object.create(obj); 


/* 
When an object inherits its prototype from another object, it also inherits the supertype's constructor
property 
*/

-- Some issue by bad use 
function Bird(){}
Bird.prototype = Object.create(Animal.prototype); 
let duck = new Bird(); 
duck.constructor /* It returns function Animal(){...}  */ 

// To avoid this we set the bird's contructor to the bird object .
duck.constructor  /* Now returns function Bird(){...} */

 
 -- Random Sample 
 function Animal() {...}
 Animal.prototype.eat = function() { console.log("Quiet sound while eating"); }; 

 function Dog(){...} 
 Dog.prototype = Object.create(Animal.prototype); 
 Dog.prototype.constructor = Dog; 
 Dog.prototype.bark = function() { console.log("Woof!"); }

 let beagle = new Dog(); 
 beagle.eat(); 
 beagle.bark();


/* 
We can make na object to inherits its behaviours from another object 
by cloning its prototype object
*/
-- Sample of creation of ChildObject with inheritance from superType
ChildObject.prototype = Object.create(ParentObject.prototype); 

-- Also the ChildObject can declare its own property by setting them into the prototype 
ChildObject.prototype.methodName = function() {...}; 

 /* 
 In order to override an inhrited property we need just 
 to ad another property with the same value to the subType.prototype 
 */ 

 -- Sample of overring superType prototype 
 function Animal(){}
 Animal.prototype.eat = function() { return "some" }; 

function Bird() {...}
Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.eat = function() {
	return "Some new value";
}; 

/* 
We use a Mixin to add common behaviour between unrelated objects 
We know at this time that behaviours can be share through inheritance. 
However, there are cases when inheritance is not the best solution. 
E.G : Bird, Airplane 
Two unrelated objects, but that could share the behaviour task 'fly' 
in this case the better option it's to use 'mixin' . 
	A mixin allows other objects to use a collection of functions 
*/ 
let flyMixin = function(obj){
	obj.fly = function(){ 
		console.log("Flying, etc!");
	}
}; 

-- This mixin takes an obj as arg an gives it add to it the 'fly' behaviour 
let bird = { 
	name : "Pio", 
	numberLegs : 2
}; 

let plane = { 
	model : "Boeing-777",
	numberPassengers : 524 
}; 

 
flyMixin(bird); 
flyMixin(plane);
 
    /* Now boths has the same fly behaviour added */ 

/* 
We can use closure to protect properties within an object from being externally modified. 
The simplest way to make properties private it's by creating a variable within the constructor 
function versus being globally.
	This way, the property can only be accesses and change by methods also within the constructor function
*/ 
-- Sample of a Constructor with private property 
function Bird(){ 
	let hatchedEgg = 10 ; 
	this.hatchedEggCount = function() {
		return hatchedEff;
	};
}

let ducky = new Bird(); 
ducky.getHatchedEggCount(); 

 /* 
 In JS a function always has access to the context in wich it was created. 
 This it's called closure 

 Another common thing in JS , it's the execution of a function after being created (IIFE)
 IIFE : Immediate Invoked Function Expression

 -- Sample of an Anynonymous function that executes right away. 
 (function(){ 
 	console.log("chirp, chirp!"); 
 })();


A IIFE is often use to group relates functionality into a single object or module. 
 */ 
-- Sample of an IIFE grouping functionality 
function glideMixin(obj){ 
	obj.glide = function(){ 
		console.log("Gliding on the water");
	};
}
function flyMixin(obj){
	obj.fly = function(){ 
		console.log("Flying, woosh!");
	};
}


/* This two function are group in an IIFE as follow */ 
let motionModule = (function(){ 
	return { 
		glideMixin: function(obj){
			console.log("Gliding on the water");
		}, 
		flyMixin: function(obj){ 
			console.log("Flyinh, woosh!");
		};
	}
})();     /* The two parenthesis at last, indicated the immediate execution */ 


 /* 
 Now we have an Immediate Invoked Function Expression (IIF) that returns an object motionModule. 
 This returned object contains all of the mixins behaviours as properties of the object. 
 */
