Match characters that occur one or more times. 
Sometimes, we need to match a character (or group of characters)that appears one or more times in a row. This means it occurs at least once, and may be repeated. 

We can use the + character to check if that is the case. Remeber , the character or pattern has to be present consecutively. That is, the character has to repeat one after the other. 

For example, /a+/g would find one match in "abc"and return ["a"]
Because of the +, it would also dfind a single match in "aabc" and return 
["aa"]. 


The plusi + sign to look for characters that occur one or more times. There's also an option that matches charaters that occur zero or more times. 

The character to do this is the asterisk or star  : '*' 

In reg. expr, a greedy match finds the longest possible part of a string that fits the regex pattern and returns it as a match. 
The alt. is a lazy match, which finds the smallest possible part of the string that satisfies the regex pattern. 

We can apply the regex /t[a-z]*i/ to the string "titanic". This regex is basically a pattern that starts with t, end with o, and has some letters in between. 

Regulare expressions are by default greedy. 
It finds the largest sub-string possible to fit the pattern. 

However we can use the ? character to change it to lazy matching. 
"titanic" matched against the adjusted regex of /t[a-z]*?i/ returns ["ti"]

Match beginning string Patterns. 
Patterns in specific postions in strings. 

In an earlier challenge, we used the caret character (^) inside a character set to create a 'negated character set' in the form [^thisThatWillNotBeMatched]

  ------- !important ------------
Outside of a character set, the caret is used to search for patterns at the beginning of strings. 

let firstString = "Ricky is first and can be found.";
let firstRegex = /^Ricky/; 
firstRegex.test(firstString); 
//Returns true
let notFirst = "You can't find Ricky now"; 
firstRegex.test(notFirst); 
//Returns false


  ------- !important ------------
  We can search the ends of strings using the dollar sign character $ at the end of the regex. 

  let theEnding = "This is a never ending story"; 
  let storyRegex = / story$/; 
  storyRegex.test (theEnding); 
  //Returns true 
  let noEnding = "Sometimes a story will have to end"; 
  storyRegex.test(noEnding); 
  // Returns false


  Using character classes, we were abe to search for all letters of the alphabet with [a-z]- 
  This kind of character class is common enough that there is a shortcut for it,  although it includes a few extra characters as well. 

  The closest character class in Js to match the alphabet is \w. This shortcut is equal to [A-Za-z0-9_]. 
  This character class matches upper and lowercase letters plus numbers. 
  Note, this character class also includes the underscore character (_)

  let longHanf = /[A-Za-z0-9_]+/; 
  let shortHsnf = /\w+/; 
  let numbers = "42"; 
  let varNames = "important_var"; 
  longHand.test(numbers);   //Returns true 
  shortHand.test(numbers);  //Returns true 
  longHand.test(varNames);  // Returns true 
  shortHand.test(varNames);  //Returns true, 

  // these shortcut character classes are also known as shorthand character classes. 


  We can search for the opposite of the \w with \W. Note, the opposite pattern uses a capital letter. This shortcut is the same as [^A-Za-z0-9_]


  let shortHand = /\W/; 
  let numbers ="42%";
  let sentence = "Coding!";
  numbers.match(shortHand);   //Returns ["%"]
  sentence.match(shortHAnd);  //Returns ["!"]

  The shortcut look for digit is \d, with a lowercase d. This is equal to the character class [ 0-9], which looks for a single character of any number between zero and nine. 


  The shortcut to look for non-digit character is \D. This is equal to the character class [^0-9], which looks for a single character that is not a number between sero and nine. 



  ------------------------------------------------------
  Restric Possible Usernames 
  usernames are used everywhere on the internet. They are what give users a unique identity on their favorite sites. 

  We need to check all the usernames in a database. Here are some simple rules that users have to follow when creating their username. 

  1 - The only numbers in the username have to be at the end. 
  2 - Username letters can be lowercase and uppercase. 
  3 - Usernames have to be at least two characters along. A two-letters username can only use alphabet letter characters. 


Usernames have to be at least two characters long. {2,}A two-letter username can only use alphabet letter characters. ^[a-z]

regex = /^[a-z]{2,}\d*$/i


We can also match the whitespace using \s, which is a lowercase s. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. We can think of it as similar to the character class [\r\t\f\n\v]. 

let whitepace = "Whitespace. Whitespace everywhere!"
let spaceRgex = /\s/g; 
whiteSpace.match(spaceRegex); 
// Returns [" ", " "]


We search for no-whitespace using \S, which is an uppercase s. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. We can think of it being similar to the character class [ ^\r\t\f\n\v]

