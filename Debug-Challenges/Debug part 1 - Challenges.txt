Intro to Deb. Challenges.
Debugging is a valuable and (unfortunately) necessary tools for programes. 
It follows the testing phase od checking if our code works as intended, and discovering it does not. Debugging is the process of findinfg exactly what isn't working and fixing it. After spending time creating a brilliant block of code, it is tough realizing it may have errors.  
These issues generally come in three forms 
1) Syntax errors that prevente a program from running. 
2) runtime errors when code fails to execute or has unexpected behavior. 
3) Semantic <or logical> errors when code doesn't do what it's meant to. 


-- Semantic and runtime  errors are harder to find. They may cause our program to crash, make it run forever, or give incorrect output. Think of debugging  as trying to understand why our code is behaving that way it is. 


Debugging is frustrating, but it helps to develop (and follow)a step-by-step approach to review our code. This means checking the intermediate values and types of variables to see if they are what they should be. We can start with a simple process of elimination.  

Start checking values in a block of code from the middle to try to cut the search space in half. A problem in one spot indicates a bug in the first half of the code. If not, it's likely in the seconf. 

Debugging is a learnable skill that just requires a little patience and practice to master.


---------------------------------------------------------------  :O ---------------------------------------------



Use JS console to check the value of a variable. 

Both Chrome and firefox have excellent Js consoles, aslo known as DevTools, for debugging our Js. 

The console.log() method, which 'prints'the output of what's whitin its parentheses to the console, will likely be the most helpful debugging tool.

Having check points to see the status of our calculations throughout our code will help narrow down where the problem is. 



We can use typeof to check the data structure, or type, of a variable. This is useful in deb when working with mult. data types. Type errors can lurk in calculations or function calls. 

-- Be caraful especially when we're accessing and working with external data in the form of a js  object notation (json) object. 

Some examples using typeof : 


console..log (typeof "");   //outputs "string"
console..log (typeof 0);   //outputs "number"
console..log (typeof {});   //outputs "object"
console..log (typeof []);   //outputs "object"

Js recogniez six primitive (inmutable) data types : Boolean, Null, Undefined, Number, String and Symbol (new with ES6) and one type for mutable items : object. 

-- In Js arrays are technically a type of object. 

The console.log() and typrof methods are the two primary ways to check intermediate values and types of program output. 

One syntax-level issue rhat fast typers can commisarete with is the humble spelling error. 

Js var and hunctions names are case-sensitive. 
Transposed, missing, or mis-capitalized character in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. 

Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends tends to happen wen we're editing existing code and inserting items with one of their pair types. 
Also, we need to take cara when nesting code blocks into other, such as adding a callback function as an argument to a method. 

One way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match.

Catch mixed usage of single and double quotes 
Js allows the use of both single ('') and double ("") quotes to declare a string. 
Deciding wich one to use generally comes down to personal preference, with some exceptions. 

Having two choices is great when a string has contractions or another piece of text that's in quotes. We've caraful that we don't close the string too early, wich causes a syntax error. 

Some examples of mixing quotes. 

//These are correct : 
const grouchoContraction = "I've has a perfectly wonderful evening, but this wasn't it"; 
const quoteInString = "Groucho Marx once said 'Quote me as saying I was mis-quoted'"; 

//This is incorrect : 
const uhOhGroucho = 'I've has a perfectly wonderful evening, but this wasn't it.';

We can escape the quote inside the string by using the backslash 
(\) escape character.

Correct use of same quotes :
const allSameQuotes = 'I\'ve has a perfectly wonderful evening, but this wasn\'t it.'; 


Catch Use of Assignment Operator 
Instead of Equality Operator 
The assignment operator (=) in Js assigns a value to a variable name. And the  == and === operators checj for equality (the triple ===) test for strict equality, meaning both value and type are the same. 

Almost every value on its own in Js evaluate to true, except what are known as the "falsy" values : false, 0 , ""(an empty string), NaN, undefined, and null.

When a function or method doesn't take any arguments, we may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in our code. This error can be detected  by logging variable values (or their types)to the console and seeing that one is set to a function reference, instead of the expected value the function returns. 

example 

function myFunction () { 
	return "Rock You";
}
let varOne = myFunction;	//Set to equal a function
let varOne = myFunction();	//Set to equal the string "Rock You"

Continuing the discussion on calling functions, the next bug to watch out for is when a function's argument are supplid in the incorrect order. If the arguments are different types, such as a function expecting and array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sens,. Make sure to supply all required argument, in the proper order to avoid these issues. 
