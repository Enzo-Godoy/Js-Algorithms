atch off by one error when using indexing
Off by one errors (sometimes called OBOE) crop up when we're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indice of them. 
Js indexinf starts at zero, not one, wich means the last index is always one less than length of the item. If we try to access an index equal to the length, the program may throw an "index out of range" referen error or print undefined. 

When we use string or arrays methods that take ranges as arguments, it helps to read the documentation and undestand if they are inclusive (the item at the given index is part of what's returned) or not. 



let alphabet = "abcde...";
let len = alphabet.length; 
for (let i = 0 ; i <= len ; i++){
	// loops one too many items at the end
	console.log(alphabet[i]);
}
for (let i = 0 ; i <= len ; i++){
	// loops one too many items at the end.
	console.log(alphabet[i]);
}
for (let i = 0 ; i < len ; i++){
	// loops one too few times and misses the first character at index 0
	console.log(alphabet[i]);
}
for (let k = o ; i < len ; k++){
	// Goldilock pproves- who is goldilock(?) - IDK, this is just right
	console.log(alphabet[k]);
}



------------------------------------------------------

Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't or vice versa. This is particularly dangerours if we accidentally reset the variable being used for the terminal condition, causing an infinite loop- 

Printing variable value with each cycle of our loop by usin console.log() can uncover buggy behavior related to resetting, or failing to reset a variable.


Prevent infinite loops with a valid Terminal condition 

The final topic is the dreaded infinite loop. Loops are great tools when we need our program to run a code block a certain number of time or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, wich no one wants. 

Example of an infinite loop- 
Don't have break conditions, so don't call this function. Be lovely with your pc. 

function loopy () { 
	while(true){
		console.log("Hello, World");
	}
}
Are two kinds of errors one is incrementing or decrementing a counter variable in hte wrong direction from the terminal condition.
Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it. 

