The remainder operator % gives the remainder of the division of two numbers.

Usage
In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.

Note
The remainder operator is sometimes incorrectly referred to as the "modulus" operator. It is very similar to modulus, but does not work properly with negative number.

In programming, it is common to use assignments to modify the contents of a variable. 
Remember that eveything to the right of the equals sign is evaluated first, so we can say: 

myVar = myVar + 5; 

//There are operators wich do both a mathematical operation and assignment in one step. 

One such operator is the += operator. 

A string it is a series of zero or more characters enclosed in single or double quotes. 




Escaping literal quotes in Strings 

When we are defining a string we must start and end with a single or double quotes.

And when we need to escape a quote from considering it as an end of string quote by placing a backslask (\) in front of the quote. 

This signals to Javascript that the following quote is not the end of the string, but should instead appear inside the string. 
String values in Js may be written with single or double quotes, as long as we start and end with the same type of quote.
Unlike some other programming lenguages, single and double quotes work the same in Js. 
A string has the same kind of quote at the beginning and end. But if we have the same quote somewhere in the middle, the string will stop early and throw an error.


We can use both quotes safely by using the backslash \ as an escape character.

Escape sequence in Strings. 
Quotes are not the only characters that can be escaped inside a string. There are two reasons to use escaping characters :
First is to allow us to use characters we might not otherwise be able to type out, such as a backspace. 
Second is to allow us to represent multiple quotes in a string without Js misinterpreting what do we mean. 

Some character in order to be escaped are: 
\'  - Single quote
\"    Double quote
\\    Backslash
\n    Newline
\r    Carriage Return
\t    Tab
\b    Backspace
\f    Form Feed



Concatenation oeprator (+) we use it in strings.
To build a new string out of other string  by concatenating them together. 


// What out for spaces. Concatenation does not add spaces between concatenated strings, so we need to add all by ourself.

Also we can use the (+=) operator to concatenate a string onto the end of an existing string variable. 
This can be helpfull to avoid rewrite the same string many times.



Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.


We can find the length of a string value by writing. .length after the string variable or string literal. 

Example : 
"Just a string".length // 13


Bracket notation is a way to get a character at a specific index within a string. 
Most modern programming lenguages, start counting  at 0. 
  //This is referred to as Zero-based indexing. 


  InJS , String values are immutable, wich means that they cannot be altered once created. 

  For example : 
  var myStr = "Bob"; 
  myStr [0] = "J"; 

    //Doesn't work. 

  //This doesn't mean that strings cann't be changed, just that the individual character of a string literal cann't be changed. The only way to change  some string would be to assign it with a new string, like the following example: 


  var myStr= "Bob"; 
  myStr = "Job"; 
    //This will work. 

  We can also use bracket notation to get the character at other positions within a strin. 
  Remeber that computers start counting 0, so the first character is actually the zeroth character. 

  In order to get the last letter of a string we can subtract one from the string's length. 

  For example : 
   var firstName = "Charles"; 
   firstname[firstName.length - 1];


 We can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.

 Witj Js array variables, we can store several pieces of data in one place. 

 We start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry for example : 

 var sandwich = ["peanut butter", "jelly", "bread"]; 


 We can also nest arrays within arrays, like 
 [["Blues", 23],["Mc'CKensy", 33]];



 We can access the data inside arrays using indexes. 


 Array indexes are written in the same bracket notation that string use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use zero-based indexing, so the first element in an array is element 0. 


 //There shouldn' be any spaces between the array name and the squeare brackets, like array [0].
 Although Js is able to proccess this correctly, this may confuse other programmers reading our code.


 //Unlike strins, the entries of arrays are mutable and can be changed freely. 

  Example : 
  var ourArray = [50,40,30]; 
  ourArray[0] = 15 ; // equals [15,40,30]


  Access Multi-dimensional Arrays with indexes. 
  One way to think of a multi-dimensional array, is an array of arrays. When we use brackets to access our array, the first set of brackets refers to the entries in the outer-most(the first level) array, and each additional pair of brackets refers to the next level of entries inside. 

  Example : 

  var arr = [
 [1,2,3],
 [4,5,6],
 [7,8,9],
 [[10,11,13],13,14]
]; 
arr[3];     -----------//equals [[10,11,13],13,14]
arr[3][0] ; ----------//equals [10,11,12]
arr[3][0][1]; ------// equals 11


//There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] is not allowed. Although Js is able to process this correctly, this may confuse other programmers reading our code. 



//An easy way ro append data to the end of an array is via the push() function.

.push() ---takes one or more parameters and "pushes" them onto the end of the array. 

Example : 
var arr = [1,2,3];
arr.push(5);
//arr is now [1,2,3,5]

Another way to change the data in arrays is with the .pop() function.

.pop() is used to "pop" a value off of the end of an array. We can store this "popped off" value by assigning it to a variable. In other words , .pop() removes the last elemnt from an array and returns that element. 

An y type of entry can be "pooped" off on an array - numbers, strings, even nested arrays. 

var threeArr = [1,4,6]; 
var one Down = threeArr.pop(); 
console.log(oneDown);   //Returns 6
console.log(threeArr);  //Returns [1,4]

Basically we cut oof the last value, if we put in a variable we store it, if not it's delete from the array.


